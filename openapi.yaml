openapi: 3.0.3
info:
  version: "1.0"
  title: Jasper API
servers:
  - url: "{protocol}://{server}/api/v1"
    description: Your PIM API server
    variables:
      protocol:
        default: "https"
        enum:
          - "https"
          - "http"
        description: The API protocol
      server:
        default: "yourpim.com"
        description: Your PIM API server
tags:
  - name: Authentication
    description: >
      Jasper uses API keys to allow access to the API. Contact your account representative to receive a key for your PIM. Jasper expects the API key to be included in the header of all API requests. Click 'Authorize' to generate an example.
    externalDocs:
      description: main docs
      url: https://api.jasperpim.com/#authentication
  - name: Admin
    description: This endpoint returns the current PIM server time, confirming authentication.
    externalDocs:
      description: main docs
      url: https://api.jasperpim.com/#admin
  - name: Attributes
  - name: Attribute Type Values
  - name: Attribute Sets
  - name: Attribute Set Attributes
  - name: Blocks
  - name: Block Assets
  - name: Brands
  - name: Brand Assets
  - name: Brand Attributes
  - name: Categories
  - name: Category Assets
  - name: Category Channels
  - name: Channels
  - name: Display Groups
  - name: Exports
  - name: Generic Entities
  - name: Options
  - name: Option Values
  - name: Option Sets
  - name: Option Set Options
  - name: Pages
  - name: Page Assets
  - name: Produtct Assets
  - name: Product Barcodes
  - name: Product Categories
  - name: Product Prices
  - name: Product Inventory
  - name: Product Attributes
  - name: Product Channels
  - name: Product Relations
  - name: Product Relations Attributes
  - name: Product Tags
  - name: Template
  - name: Webhooks
  - name: Errors

paths:
  /ping:
    get:
      responses:
        "200":
          description: Successful request returns current PIM server time.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ping"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /attributes:
    get:
      tags:
        - Attributes
      responses:
        "200":
          description: This endpoint retrieves all attributes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Attributes
      summary: Create an Attribute
      description: This endpoint allows for the creation of a new attribute.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
      responses:
        "201":
          description: Attribute created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attributes/version/{VERSION_ID}:
    get:
      tags:
        - Attributes
      summary: Retrieve Attributes by Version
      description: This endpoint retrieves all attributes of the specified version.
      parameters:
        - name: VERSION_ID
          in: path
          required: true
          description: The ID of the version for which attributes are to be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: A list of attributes for the specified version.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attribute"
        "404":
          description: Version not found

  /attributes/{attribute_id}:
    get:
      tags:
        - Attributes
      summary: Retrieve a Specific Attribute
      description: This endpoint retrieves a specific attribute by its ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified attribute.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "404":
          description: Attribute not found.
      security:
        - bearerAuth: []
    put:
      tags:
        - Attributes
      summary: Update a Specific Attribute
      description: This endpoint allows for updating an existing attribute by its ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
      responses:
        "200":
          description: Attribute updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Attribute not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Attributes
      summary: Delete a Specific Attribute
      description: This endpoint allows for the deletion of a specific attribute by its ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to delete.
          schema:
            type: string
      responses:
        "204":
          description: Attribute deleted successfully.
        "404":
          description: Attribute not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attributes/{attribute_id}/versions/{version_id}:
    get:
      tags:
        - Attributes
      summary: Retrieve a Specific Attribute by Version
      description: This endpoint retrieves a specific attribute by its ID for the specified version.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to retrieve.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: The ID of the version for which the attribute is to be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified attribute for the given version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "404":
          description: Attribute or version not found.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Attributes
      summary: Delete a Specific Attribute Version
      description: This endpoint allows for the deletion of a specific version of an attribute by its ID and version ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute for which a version is to be deleted.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: The ID of the attribute version to delete.
          schema:
            type: string
      responses:
        "204":
          description: Attribute version deleted successfully.
        "404":
          description: Attribute or attribute version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

    put:
      tags:
        - Attributes
      summary: Update a Specific Attribute Version
      description: This endpoint allows for updating a specific version of an existing attribute by its ID and version ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to update.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: The ID of the version of the attribute to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
      responses:
        "200":
          description: Attribute version updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Attribute or version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attributes/{attribute_id}/type_values:
    get:
      tags:
        - Attribute Type Values
      summary: Get All Attribute Type Values
      description: Retrieve a list of all attribute type values defined in the PIM.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute whose type values to retrieve
          schema:
            type: string
      responses:
        "200":
          description: A list of attribute type values.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeTypeValue"
        "401":
          description: Unauthorized. Invalid or missing authorization token.

  /attributes/{attribute_id}/type_values/version/{version_id}:
    get:
      tags:
        - Attribute Type Values
      summary: Get All Attribute Type Values by Version
      description: Retrieve all attribute type values for a specific version.
      parameters:
        - name: version_id
          in: path
          required: true
          description: The ID of the version for which attribute type values are to be retrieved.
          schema:
            type: string
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute whose type values to retrieve
          schema:
            type: string
      responses:
        "200":
          description: A list of attribute type values for the specified version.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeTypeValue"
        "404":
          description: Version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attributes/{attribute_id}/type-values/{type_value_id}/version/{version_id}:
    get:
      tags:
        - Attribute Type Values
      summary: Get a Version of the Specific Attribute Type Value
      description: Retrieve a specific version of an attribute type value by its ID and version ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute type value.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: The ID of the version of the attribute type value to retrieve.
          schema:
            type: string
        - name: type_value_id
          in: path
          required: true
          description: The ID of the version of the attribute type value to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified version of the attribute type value.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeTypeValue"
        "404":
          description: Attribute type value or version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /attributes/{attribute_id}/attributes/{type_value_id}:
    get:
      tags:
        - Attribute Type Values
      summary: Get a Specific Attribute Type Value
      description: Retrieve details of a specific attribute type value by its ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute type value to retrieve.
          schema:
            type: string
        - name: type_value_id
          in: path
          required: true
          description: The ID of the type value to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified attribute type value.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeTypeValue"
        "404":
          description: Attribute type value not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attribute/{attribute_id}/type_values:
    post:
      tags:
        - Attribute Type Values
      summary: Create an Attribute Type Value
      description: Create a new attribute type value in the system.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to add.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeTypeValue"
      responses:
        "201":
          description: Attribute type value created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeTypeValue"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attributes/{attribute_id}/type_values/{type_value_id}/version/{version_id}:
    put:
      tags:
        - Attribute Type Values
      summary: Update the Version of the Attribute Type Value
      description: Update a specific version of an existing attribute type value by its ID and version ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute.
          schema:
            type: string
        - name: type_value_id
          in: path
          required: true
          description: The ID of the attribute type value.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: The ID of the version.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeTypeValue"
      responses:
        "200":
          description: The version of the attribute type value updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeTypeValue"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Attribute type value or version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attributes/{attribute_id}/type_values/{type_value_id}:
    put:
      tags:
        - Attribute Type Values
      summary: Update Attribute Type Value
      description: Update an existing attribute type value by its ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute type value to update.
          schema:
            type: string
        - name: type_value_id
          in: path
          required: true
          description: The ID of the type value to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeTypeValue"
      responses:
        "200":
          description: Attribute type value updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeTypeValue"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Attribute type value not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Attribute Type Values
      summary: Delete a Specific Attribute Type Value
      description: This endpoint allows for the deletion of a specific attribute type value by its ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute type value to delete.
          schema:
            type: string
        - name: type_value_id
          in: path
          required: true
          description: the ID of the type value
          schema:
            type: string
      responses:
        "204":
          description: Attribute type value deleted successfully.
        "404":
          description: Attribute type value not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attributes/{attribute_id}/type_values/{type_value_id}/versions/{version_id}:
    delete:
      tags:
        - Attribute Type Values
      summary: Delete a Version of the Specific Attribute Type Value
      description: This endpoint allows for the deletion of a specific version of an attribute type value by its ID and version ID.
      parameters:
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute.
          schema:
            type: string
        - name: type_value_id
          in: path
          required: true
          description: The ID of the attribute type value.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: The ID of the version to delete.
          schema:
            type: string
      responses:
        "204":
          description: The version of the attribute type value deleted successfully.
        "404":
          description: Attribute type value or version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attribute_sets:
    get:
      tags:
        - Attribute Sets
      summary: Get All Attribute Sets
      description: Retrieve a list of all attribute sets defined in the PIM.
      responses:
        "200":
          description: A list of attribute sets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeSet"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Attribute Sets
      summary: Create an Attribute Set
      description: Create a new attribute set in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeSet"
      responses:
        "201":
          description: Attribute set created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeSet"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /attribute_sets/{attribute_set_id}:
    get:
      tags:
        - Attribute Sets
      summary: Get a Specific Attribute Set
      description: Retrieve details of a specific attribute set by its ID.
      parameters:
        - name: attribute_set_id
          in: path
          required: true
          description: The ID of the attribute set to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified attribute set.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeSet"
        "404":
          description: Attribute set not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Attribute Sets
      summary: Update a Specific Attribute Set
      description: Update an existing attribute set by its ID.
      parameters:
        - name: attribute_set_id
          in: path
          required: true
          description: The ID of the attribute set to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeSet"
      responses:
        "200":
          description: Attribute set updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeSet"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Attribute set not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Attribute Sets
      summary: Delete a Specific Attribute Set
      description: This endpoint allows for the deletion of a specific attribute set by its ID.
      parameters:
        - name: attribute_set_id
          in: path
          required: true
          description: The ID of the attribute set to delete.
          schema:
            type: string
      responses:
        "204":
          description: Attribute set deleted successfully.
        "404":
          description: Attribute set not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /attribute_set_attributes:
    get:
      tags:
        - Attribute Set Attributes
      summary: Get All Attribute Set Attributes
      description: Retrieve a list of all attribute set attributes defined in the PIM.
      responses:
        "200":
          description: A list of attribute set attributes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributeSetAttribute"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /attribute_sets/{attribute_set_id}/attributes:
    post:
      tags:
        - Attribute Set Attributes
      summary: Create an Attribute Set Attribute
      description: Add a new attribute to an existing attribute set.
      parameters:
        - name: attribute_set_id
          in: path
          required: true
          description: The ID of the attribute set to which the attribute will be added.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeSetAttribute"
      responses:
        "201":
          description: Attribute set attribute created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeSetAttribute"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Attribute set not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /attribute_sets/{attribute_set_id}/attributes/{attribute_id}:
    delete:
      tags:
        - Attribute Set Attributes
      summary: Delete a Specific Attribute Set Attribute
      description: This endpoint allows for the deletion of a specific attribute from an attribute set by their IDs.
      parameters:
        - name: attribute_set_id
          in: path
          required: true
          description: The ID of the attribute set.
          schema:
            type: string
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to delete from the attribute set.
          schema:
            type: string
      responses:
        "204":
          description: Attribute set attribute deleted successfully.
        "404":
          description: Attribute set or attribute not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /blocks:
    get:
      tags:
        - Blocks
      summary: Get All Blocks
      description: Retrieve a list of all blocks defined in the PIM.
      responses:
        "200":
          description: A list of blocks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Block"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Blocks
      summary: Create a Block
      description: Create a new block in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Block"
      responses:
        "201":
          description: Block created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Block"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /blocks/{block_id}:
    get:
      tags:
        - Blocks
      summary: Get a Specific Block
      description: Retrieve details of a specific block by its ID.
      parameters:
        - name: block_id
          in: path
          required: true
          description: The ID of the block to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified block.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Block"
        "404":
          description: Block not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Blocks
      summary: Update a Specific Block
      description: Update an existing block by its ID.
      parameters:
        - name: block_id
          in: path
          required: true
          description: The ID of the block to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Block"
      responses:
        "200":
          description: Block updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Block"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Block not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /block_assets:
    get:
      tags:
        - Block Assets
      summary: Get All Block Assets
      description: Retrieve a list of all block assets defined in the PIM.
      responses:
        "200":
          description: A list of block assets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlockAsset"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /block_assets/{block_asset_id}:
    get:
      tags:
        - Block Assets
      summary: Get a Specific Block Asset
      description: Retrieve details of a specific block asset by its ID.
      parameters:
        - name: block_asset_id
          in: path
          required: true
          description: The ID of the block asset to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified block asset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockAsset"
        "404":
          description: Block asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /brands:
    get:
      tags:
        - Brands
      summary: Get All Brands
      description: Retrieve a list of all brands defined in the PIM.
      responses:
        "200":
          description: A list of brands.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Brand"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Brands
      summary: Create a Brand
      description: Create a new brand in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Brand"
      responses:
        "201":
          description: Brand created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Brand"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /brands/{brand_id}:
    get:
      tags:
        - Brands
      summary: Get a Specific Brand
      description: Retrieve details of a specific brand by its ID.
      parameters:
        - name: brand_id
          in: path
          required: true
          description: The ID of the brand to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified brand.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Brand"
        "404":
          description: Brand not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Brands
      summary: Update a Specific Brand
      description: Update an existing brand by its ID.
      parameters:
        - name: brand_id
          in: path
          required: true
          description: The ID of the brand to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Brand"
      responses:
        "200":
          description: Brand updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Brand"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Brand not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Brands
      summary: Delete a Specific Brand
      description: This endpoint allows for the deletion of a specific brand by its ID.
      parameters:
        - name: brand_id
          in: path
          required: true
          description: The ID of the brand to delete.
          schema:
            type: string
      responses:
        "204":
          description: Brand deleted successfully.
        "404":
          description: Brand not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /brand_assets:
    get:
      tags:
        - Brand Assets
      summary: Get All Brand Assets
      description: Retrieve a list of all brand assets defined in the PIM.
      responses:
        "200":
          description: A list of brand assets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BrandAsset"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Brand Assets
      summary: Create a Brand Asset
      description: Create a new brand asset in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandAsset"
      responses:
        "201":
          description: Brand asset created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandAsset"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /brand_assets/{brand_asset_id}:
    get:
      tags:
        - Brand Assets
      summary: Get a Specific Brand Asset
      description: Retrieve details of a specific brand asset by its ID.
      parameters:
        - name: brand_asset_id
          in: path
          required: true
          description: The ID of the brand asset to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified brand asset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandAsset"
        "404":
          description: Brand asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Brand Assets
      summary: Update a Specific Brand Asset
      description: Update an existing brand asset by its ID.
      parameters:
        - name: brand_asset_id
          in: path
          required: true
          description: The ID of the brand asset to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandAsset"
      responses:
        "200":
          description: Brand asset updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandAsset"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Brand asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Brand Assets
      summary: Delete a Specific Brand Asset
      description: This endpoint allows for the deletion of a specific brand asset by its ID.
      parameters:
        - name: brand_asset_id
          in: path
          required: true
          description: The ID of the brand asset to delete.
          schema:
            type: string
      responses:
        "204":
          description: Brand asset deleted successfully.
        "404":
          description: Brand asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /brand-attributes:
    get:
      tags:
        - Brand Attributes
      summary: Get All Brand Attributes
      description: Retrieve a list of all brand attributes defined in the PIM.
      responses:
        "200":
          description: A list of brand attributes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BrandAttribute"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Brand Attributes
      summary: Create a Brand Attribute
      description: Create a new brand attribute in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandAttribute"
      responses:
        "201":
          description: Brand attribute created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandAttribute"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /brand-attributes/{brand_attribute_id}:
    get:
      tags:
        - Brand Attributes
      summary: Get a Specific Brand Attribute
      description: Retrieve details of a specific brand attribute by its ID.
      parameters:
        - name: brand_attribute_id
          in: path
          required: true
          description: The ID of the brand attribute to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified brand attribute.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandAttribute"
        "404":
          description: Brand attribute not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Brand Attributes
      summary: Update a specific brand attribute value.
      description: This endpoint updates a specific brand attribute value.
      parameters:
        - name: brand_attribute_id
          in: path
          required: true
          description: The ID of the brand attribute to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandAttribute"
      responses:
        "200":
          description: Brand asset updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandAttribute"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Brand asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token
      security:
        - bearerAuth: []
  /attribute-values/{attribute_value_id}:
    delete:
      tags:
        - Brand Attributes
      summary: Delete a Specific Attribute Value
      description: This endpoint allows for the deletion of a specific attribute value by its ID.
      parameters:
        - name: attribute_value_id
          in: path
          required: true
          description: The ID of the attribute value to delete.
          schema:
            type: string
      responses:
        "204":
          description: Attribute value deleted successfully.
        "404":
          description: Attribute value not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /brands/{brand_id}/assigned_attributes:
    post:
      tags:
        - Brand Attributes
      summary: Assign an Attribute to a Brand
      description: Assign an existing attribute to a brand.
      parameters:
        - name: brand_id
          in: path
          required: true
          description: The ID of the brand to which the attribute will be assigned.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandAttribute"
      responses:
        "201":
          description: Attribute assigned to brand successfully.
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Brand or attribute not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /brands/{brand_id}/assigned_attribute_sets:
    post:
      tags:
        - Brand Attributes
      summary: Assign an Attribute Set to a Brand
      description: Assign an existing attribute set to a brand.
      parameters:
        - name: brand_id
          in: path
          required: true
          description: The ID of the brand to which the attribute set will be assigned.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandAttribute"
      responses:
        "201":
          description: Attribute set assigned to brand successfully.
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Brand or attribute set not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /categories:
    get:
      tags:
        - Categories
      summary: Get All Categories
      description: Retrieve a list of all categories defined in the PIM.
      responses:
        "200":
          description: A list of categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Categories
      summary: Create a Category
      description: Create a new category in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /categories/{category_id}:
    get:
      tags:
        - Categories
      summary: Get a Specific Category
      description: Retrieve details of a specific category by its ID.
      parameters:
        - name: category_id
          in: path
          required: true
          description: The ID of the category to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified category.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Categories
      summary: Update a Specific Category
      description: Update an existing category by its ID.
      parameters:
        - name: category_id
          in: path
          required: true
          description: The ID of the category to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Category not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Categories
      summary: Delete a Specific Category
      description: This endpoint allows for the deletion of a specific category by its ID.
      parameters:
        - name: category_id
          in: path
          required: true
          description: The ID of the category to delete.
          schema:
            type: string
      responses:
        "204":
          description: Category deleted successfully.
        "404":
          description: Category not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /category_assets:
    get:
      tags:
        - Category Assets
      summary: Get All Category Assets
      description: Retrieve a list of all category assets defined in the PIM.
      responses:
        "200":
          description: A list of category assets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryAsset"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Category Assets
      summary: Create a Category Asset
      description: Create a new category asset in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryAsset"
      responses:
        "201":
          description: Category asset created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryAsset"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /category_assets/{category_asset_id}:
    get:
      tags:
        - Category Assets
      summary: Get a Specific Category Asset
      description: Retrieve details of a specific category asset by its ID.
      parameters:
        - name: category_asset_id
          in: path
          required: true
          description: The ID of the category asset to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified category asset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryAsset"
        "404":
          description: Category asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Category Assets
      summary: Update a Specific Category Asset
      description: Update an existing category asset by its ID.
      parameters:
        - name: category_asset_id
          in: path
          required: true
          description: The ID of the category asset to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryAsset"
      responses:
        "200":
          description: Category asset updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryAsset"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Category asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Category Assets
      summary: Delete a Specific Category Asset
      description: This endpoint allows for the deletion of a specific category asset by its ID.
      parameters:
        - name: category_asset_id
          in: path
          required: true
          description: The ID of the category asset to delete.
          schema:
            type: string
      responses:
        "204":
          description: Category asset deleted successfully.
        "404":
          description: Category asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

  /categories/{category_id}/channel/{channel_id}:
    post:
      tags:
        - Web ID
      summary: Update or Create Web ID
      description: Update an existing web ID or create a new one.
      parameters:
        - name: category_id
          in: path
          required: true
          description: The ID of the cattegory
          schema:
            type: string
        - name: channel_id
          in: path
          required: true
          description: the ID of the channel
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebId"
      responses:
        "200":
          description: Web ID updated or created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebId"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /channels:
    get:
      tags:
        - Channels
      summary: Get All Channels
      description: Retrieve a list of all channels defined in the PIM.
      responses:
        "200":
          description: A list of channels.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Channel"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /channels/{channel_id}:
    get:
      tags:
        - Channels
      summary: Get a Specific Channel
      description: Retrieve details of a specific channel by its ID.
      parameters:
        - name: channel_id
          in: path
          required: true
          description: The ID of the channel to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified channel.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
        "404":
          description: Channel not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /display_groups:
    get:
      tags:
        - Display Groups
      summary: Get All Display Groups
      description: Retrieve a list of all display groups defined in the PIM.
      responses:
        "200":
          description: A list of display groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DisplayGroup"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Display Groups
      summary: Create a Display Group
      description: Create a new display group in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisplayGroup"
      responses:
        "201":
          description: Display group created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisplayGroup"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /display_groups/{display_group_id}:
    get:
      tags:
        - Display Groups
      summary: Get a Specific Display Group
      description: Retrieve details of a specific display group by its ID.
      parameters:
        - name: display_group_id
          in: path
          required: true
          description: The ID of the display group to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified display group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisplayGroup"
        "404":
          description: Display group not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Display Groups
      summary: Update a Specific Display Group
      description: Update an existing display group by its ID.
      parameters:
        - name: display_group_id
          in: path
          required: true
          description: The ID of the display group to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisplayGroup"
      responses:
        "200":
          description: Display group updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisplayGroup"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Display group not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /exports/{export_id}:
    get:
      tags:
        - Exports
      summary: Get Export File and Status
      description: Retrieve the file and status of a specific export by its ID.
      parameters:
        - name: export_id
          in: path
          required: true
          description: The ID of the export to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified export, including file and status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportDetails"
        "404":
          description: Export not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /generic_entities:
    get:
      tags:
        - Generic Entities
      summary: Get All Generic Entities
      description: Retrieve a list of all generic entities defined in the PIM.
      responses:
        "200":
          description: A list of generic entities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GenericEntity"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Generic Entities
      summary: Create a Generic Entity
      description: Create a new generic entity in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericEntity"
      responses:
        "201":
          description: Generic entity created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericEntity"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /generic_entities/{generic_entity_id}:
    get:
      tags:
        - Generic Entities
      summary: Get a Specific Generic Entity
      description: Retrieve details of a specific generic entity by its ID.
      parameters:
        - name: generic_entity_id
          in: path
          required: true
          description: The ID of the generic entity to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified generic entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericEntity"
        "404":
          description: Generic entity not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Generic Entities
      summary: Update a Specific Generic Entity
      description: Update an existing generic entity by its ID.
      parameters:
        - name: generic_entity_id
          in: path
          required: true
          description: The ID of the generic entity to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenericEntity"
      responses:
        "200":
          description: Generic entity updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericEntity"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Generic entity not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Generic Entities
      summary: Delete a Specific Generic Entity
      description: This endpoint allows for the deletion of a specific generic entity by its ID.
      parameters:
        - name: generic_entity_id
          in: path
          required: true
          description: The ID of the generic entity to delete.
          schema:
            type: string
      responses:
        "204":
          description: Generic entity deleted successfully.
        "404":
          description: Generic entity not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /generic_entities/{generic_entity_id}/concrete_entities:
    get:
      tags:
        - Generic Entities
        - Concrete Entities
      summary: Get Generic Entity Concrete Entities
      description: Retrieve a list of all concrete entities associated with a specific generic entity.
      parameters:
        - name: generic_entity_id
          in: path
          required: true
          description: The ID of the generic entity whose concrete entities are to be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: A list of concrete entities associated with the specified generic entity.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConcreteEntity"
        "404":
          description: Generic entity not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /generic_entities/{ID}/concrete_entities:
    post:
      tags:
        - Generic Entities
        - Concrete Entities
      summary: Create a Concrete Entity
      description: This endpoint creates a concrete entity for a specific generic entity.
      parameters:
        - name: ID
          in: path
          required: true
          description: The ID of the generic entity for which you want to create a concrete entity.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/ConcreteEntity"
      responses:
        "201":
          description: Concrete entity created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  concrete_entity:
                    $ref: "#/components/schemas/ConcreteEntity"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /generic_entities/{generic_entity_id}/concrete_entities/{concrete_entity_id}:
    get:
      tags:
        - Concrete Entities
      summary: Get a Specific Concrete Entity
      description: Retrieve details of a specific concrete entity by its ID.
      parameters:
        - name: concrete_entity_id
          in: path
          required: true
          description: The ID of the concrete entity to retrieve.
          schema:
            type: string
        - name: generic_entity_id
          in: path
          required: true
          description: The ID of the generic entity.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified concrete entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcreteEntity"
        "404":
          description: Concrete entity not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Generic Entities
        - Concrete Entities
      summary: Delete a Specific Concrete Entity
      description: This endpoint deletes a specific concrete entity associated with a generic entity.
      parameters:
        - name: generic_entity_id
          in: path
          required: true
          description: The ID of the generic entity from which you're deleting the concrete entity.
          schema:
            type: string
        - name: concrete_entity_id
          in: path
          required: true
          description: The ID of the concrete entity to delete.
          schema:
            type: string
      responses:
        "204":
          description: Concrete entity deleted successfully.
        "404":
          description: Concrete entity or generic entity not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Generic Entities
        - Concrete Entities
      summary: Update a Concrete Entity
      description: This endpoint updates a specific concrete entity.
      parameters:
        - name: generic_entity_id
          in: path
          required: true
          description: The ID of the generic entity to which the concrete entity is attached.
          schema:
            type: string
        - name: concrete_entity_id
          in: path
          required: true
          description: The ID of the concrete entity to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConcreteEntity"
      responses:
        "200":
          description: Concrete entity updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcreteEntity"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Concrete entity or generic entity not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /options:
    get:
      tags:
        - Options
      summary: Get All Options
      description: Retrieve a list of all options defined in the PIM.
      responses:
        "200":
          description: A list of options.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Option"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Options
      summary: Create an Option
      description: Create a new option in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Option"
      responses:
        "201":
          description: Option created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Option"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /options/{option_id}:
    get:
      tags:
        - Options
      summary: Get a Specific Option
      description: Retrieve details of a specific option by its ID.
      parameters:
        - name: option_id
          in: path
          required: true
          description: The ID of the option to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified option.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Option"
        "404":
          description: Option not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Options
      summary: Update a Specific Option
      description: Update an existing option by its ID.
      parameters:
        - name: option_id
          in: path
          required: true
          description: The ID of the option to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Option"

      responses:
        "200":
          description: Option updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Option"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Option not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Options
      summary: Delete a Specific Option
      description: This endpoint allows for the deletion of a specific option by its ID.
      parameters:
        - name: option_id
          in: path
          required: true
          description: The ID of the option to delete.
          schema:
            type: string
      responses:
        "204":
          description: Option deleted successfully.
        "404":
          description: Option not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /option_values/{option_value_id}:
    get:
      tags:
        - Option Values
      summary: Get a Specific Option Value
      description: Retrieve details of a specific option value by its ID.
      parameters:
        - name: option_value_id
          in: path
          required: true
          description: The ID of the option value to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified option value.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionValue"
        "404":
          description: Option value not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Option Values
      summary: Update a Specific Option Value
      description: Update an existing option value by its ID.
      parameters:
        - name: option_value_id
          in: path
          required: true
          description: The ID of the option value to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/OptionValue"
      responses:
        "200":
          description: Option value updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionValue"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Option value not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Option Values
      summary: Delete a Specific Option Value
      description: This endpoint allows for the deletion of a specific option value by its ID.
      parameters:
        - name: option_value_id
          in: path
          required: true
          description: The ID of the option value to delete.
          schema:
            type: string
      responses:
        "204":
          description: Option value deleted successfully.
        "404":
          description: Option value not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /option_values:
    post:
      tags:
        - Option Values
      summary: Create an Option Value
      description: Create a new option value in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OptionValue"
      responses:
        "201":
          description: Option value created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionValue"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /option_sets:
    get:
      tags:
        - Option Sets
      summary: Get All Option Sets
      description: Retrieve a list of all option sets defined in the PIM.
      responses:
        "200":
          description: A list of option sets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OptionSet"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Option Sets
      summary: Create an Option Set
      description: Create a new option set in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/OptionSet"
      responses:
        "201":
          description: Option set created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionSet"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /option_sets/{option_set_id}:
    get:
      tags:
        - Option Sets
      summary: Get a Specific Option Set
      description: Retrieve details of a specific option set by its ID.
      parameters:
        - name: option_set_id
          in: path
          required: true
          description: The ID of the option set to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified option set.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionSet"
        "404":
          description: Option set not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Option Sets
      summary: Update a Specific Option Set
      description: Update an existing option set by its ID.
      parameters:
        - name: option_set_id
          in: path
          required: true
          description: The ID of the option set to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/OptionSet"
      responses:
        "200":
          description: Option set updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionSet"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Option set not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /option_set_options:
    get:
      tags:
        - Option Set Options
      summary: Get All Option Set Options
      description: Retrieve a list of all option set options defined in the PIM.
      responses:
        "200":
          description: A list of option set options.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OptionSetOption"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /option_set_options/{option_set_option_id}:
    put:
      tags:
        - Option Set Options
      summary: Create or Update an Option Set Option
      description: Create a new option set option or update an existing one by its ID.
      parameters:
        - name: option_set_option_id
          in: path
          required: true
          description: The ID of the option set option to update. Omit this parameter to create a new option set option.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/OptionSetOption"
      responses:
        "200":
          description: Option set option updated successfully.
        "201":
          description: Option set option created successfully.
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Option set option not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Option Set Options
      summary: Delete a Specific Option Set Option
      description: This endpoint allows for the deletion of a specific option set option by its ID.
      parameters:
        - name: option_set_option_id
          in: path
          required: true
          description: The ID of the option set option to delete.
          schema:
            type: string
      responses:
        "204":
          description: Option set option deleted successfully.
        "404":
          description: Option set option not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /pages:
    get:
      tags:
        - Pages
      summary: Get All Pages
      description: Retrieve a list of all pages defined in the PIM.
      responses:
        "200":
          description: A list of pages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Page"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Pages
      summary: Create a Page
      description: Create a new page in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Page"
      responses:
        "201":
          description: Page created successfully.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Page"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /pages/{page_id}:
    get:
      tags:
        - Pages
      summary: Get a Specific Page
      description: Retrieve details of a specific page by its ID.
      parameters:
        - name: page_id
          in: path
          required: true
          description: The ID of the page to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified page.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
        "404":
          description: Page not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Pages
      summary: Update a Specific Page
      description: Update an existing page by its ID.
      parameters:
        - name: page_id
          in: path
          required: true
          description: The ID of the page to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Page"
      responses:
        "200":
          description: Page updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Page not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /page_assets:
    get:
      tags:
        - Page Assets
      summary: Get All Page Assets
      description: Retrieve a list of all page assets defined in the PIM.
      responses:
        "200":
          description: A list of page assets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PageAsset"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /page_assets/{page_asset_id}:
    get:
      tags:
        - Page Assets
      summary: Get a Specific Page Asset
      description: Retrieve details of a specific page asset by its ID.
      parameters:
        - name: page_asset_id
          in: path
          required: true
          description: The ID of the page asset to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified page asset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageAsset"
        "404":
          description: Page asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products:
    get:
      tags:
        - Products
      summary: Get All Products
      description: Retrieve a list of all products defined in the PIM.
      responses:
        "200":
          description: A list of products.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Product"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Products
      summary: Create a Product
      description: Create a new product in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    type: object
                    $ref: "#/components/schemas/Product"

        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/version/{version_id}:
    get:
      tags:
        - Products
      summary: Get All Products by Version
      description: Retrieve a list of all products for a specific version defined in the PIM.
      parameters:
        - name: version_id
          in: path
          required: true
          description: The ID of the version for which products are to be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: A list of products for the specified version.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}:
    get:
      tags:
        - Products
      summary: Get a Specific Product by ID
      description: Retrieve details of a specific product by its ID.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Products
      summary: Update a Specific Product
      description: Update an existing product by its ID.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: "#/components/schemas/Product"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Products
      summary: Delete a Specific Product
      description: Delete an existing product by its ID.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product to delete.
          schema:
            type: string
      responses:
        "204":
          description: Product deleted successfully.
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/version/{version_id}:
    get:
      tags:
        - Products
      summary: Get a Version of a Product
      description: Retrieve a specific version of a product by its product ID and version ID.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: The ID of the product version to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified product version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product or product version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Products
      summary: Update a Specific Version of a Product
      description: Update an existing version of a product by its product ID and version ID, or create a new product version if it does not exist.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product to update.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: The ID of the version to update or create.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product version updated successfully.
        "201":
          description: New product version created successfully.
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product or product version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Products
      summary: Delete a Specific Version of a Product
      description: Delete a specific version of an existing product by its product ID and version ID.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose version is to be deleted.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: The ID of the version to delete.
          schema:
            type: string
      responses:
        "204":
          description: Product version deleted successfully.
        "404":
          description: Product or product version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/sku/{sku}:
    get:
      tags:
        - Products
      summary: Get a Specific Product by SKU
      description: Retrieve details of a specific product by its SKU.
      parameters:
        - name: sku
          in: path
          required: true
          description: The SKU of the product to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{child_product_id}/remove_from_parent:
    delete:
      tags:
        - Products
      summary: Remove Child Product From Parent
      description: Remove a given child product from its parent product. The child product will be unpublished as a result of this operation.
      parameters:
        - name: child_product_id
          in: path
          required: true
          description: The ID of the child product to remove from its parent.
          schema:
            type: string
      responses:
        "204":
          description: Child product removed from parent successfully.
        "404":
          description: Child product or parent product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /product-assets:
    get:
      tags:
        - Product Assets
      summary: Get All Product Assets
      description: Retrieve a list of all product assets defined in the PIM.
      responses:
        "200":
          description: A list of product assets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAsset"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Product Assets
      summary: Create a Product Asset
      description: Create a new product asset in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
            $ref: "#/components/schemas/ProductAsset"
      responses:
        "201":
          description: Product asset created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAsset"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /product-assets/{product_asset_id}:
    get:
      tags:
        - Product Assets
      summary: Get a Specific Product Asset
      description: Retrieve details of a specific product asset by its ID.
      parameters:
        - name: product_asset_id
          in: path
          required: true
          description: The ID of the product asset to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified product asset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAsset"
        "404":
          description: Product asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Product Assets
      summary: Update a Specific Product Asset
      description: Update an existing product asset by its ID.
      parameters:
        - name: product_asset_id
          in: path
          required: true
          description: The ID of the product asset to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
            $ref: "#/components/schemas/ProductAsset"
      responses:
        "200":
          description: Product asset updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAsset"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Product Assets
      summary: Delete a Specific Product Asset
      description: Delete an existing product asset by its ID.
      parameters:
        - name: product_asset_id
          in: path
          required: true
          description: The ID of the product asset to delete.
          schema:
            type: string
      responses:
        "204":
          description: Product asset deleted successfully.
        "404":
          description: Product asset not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/barcodes:
    get:
      tags:
        - Product Barcodes
      summary: Get All Product Barcodes
      description: Retrieve all product barcodes for a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose barcodes to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: A list of product barcodes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  barcodes:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductBarcode"
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Product Barcodes
      summary: Create a Product Barcode
      description: Create a new product barcode for a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product for which the barcode is being created.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
            $ref: "/components/schemas/ProductBarcodes"
      responses:
        "201":
          description: Product barcode created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductBarcode"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/barcodes/{barcode_id}:
    put:
      tags:
        - Product Barcodes
      summary: Update a Product Barcode
      description: Update an existing product barcode by its ID for a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product for which the barcode is being updated.
          schema:
            type: string
        - name: barcode_id
          in: path
          required: true
          description: The ID of the barcode to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: The type of this barcode (EAN, UPC-A, GTIN-13, ITF-14, Custom).
                barcode:
                  type: string
                  description: The barcode number.
              required:
                - type
                - barcode
      responses:
        "200":
          description: Product barcode updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductBarcode"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product or barcode not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Product Barcodes
      summary: Delete a Product Barcode
      description: Delete a specific product barcode by its ID for a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product for which the barcode is being deleted.
          schema:
            type: string
        - name: barcode_id
          in: path
          required: true
          description: The ID of the barcode to delete.
          schema:
            type: string
      responses:
        "204":
          description: Product barcode deleted successfully.
        "404":
          description: Product or barcode not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/barcodes/upsert:
    put:
      tags:
        - Product Barcodes
      summary: Upsert Product Barcodes (with delete)
      description: |
        Upsert (update and/or insert) a list of given product barcodes for a specific product. 
        If a product has barcodes that were not touched by this operation, those will be DELETED. 
        Only the barcodes present in the request payload will remain on the product.

        Note: For "UPC-A" we expect 12 digits. "ITF-14": 14 digits. "GTIN-13": 13 digits. "EAN": 13 digits. "Custom": any number of digits.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductBarcode"
      responses:
        "200":
          description: Product barcodes upserted successfully. Barcodes not included in the request have been deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductBarcode"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Product Barcodes
      summary: Upsert Product Barcodes (without delete)
      description: |
        Upsert (update and/or insert) a list of given product barcodes for a specific product. 
        No barcode will be deleted with this endpoint.

        Note: For "UPC-A" we expect 12 digits. "ITF-14": 14 digits. "GTIN-13": 13 digits. "EAN": 13 digits. "Custom": any number of digits.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product.
          schema:
            $ref: "#/components/schemas/ProductBarcode"
      requestBody:
        required: true
        content:
          application/json:
            schema:
      responses:
        "200":
          description: Product barcodes upserted successfully. No barcodes have been deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductBarcode"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/categories:
    post:
      tags:
        - Product Categories
      summary: Assign a Category to a Product
      description: Assign a category to a product by specifying the category ID.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product to which the category will be assigned.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: string
                  description: The ID of the category to assign to the product.
              required:
                - category_id
      responses:
        "200":
          description: Category assigned to the product successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_categories:
                    $ref: "#/components/schemas/ProductCategory"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product or category not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/prices:
    get:
      tags:
        - Product Prices
      summary: Get All Product Prices
      description: Retrieve all prices for a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose prices to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: A list of product prices.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductPrice"
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Product Prices
      summary: Create a Product Price
      description: Create a new price for a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product for which the price is being created.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
            $ref: "#/components/schemas/ProductPrice"
      responses:
        "201":
          description: Product price created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductPrice"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/prices/{price_id}:
    get:
      tags:
        - Product Prices
      summary: Get a Specific Product Price
      description: Retrieve details of a specific product price by its ID.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose price to retrieve.
          schema:
            type: string
        - name: price_id
          in: path
          required: true
          description: The ID of the product price to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified product price.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductPrice"
        "404":
          description: Product or product price not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Product Prices
      summary: Delete a Specific Product Price (Not Supported)
      description: |
        Deleting a specific product price directly via the API is not supported. 
        Please contact support if you need to delete a product price.
      deprecated: true
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose price you wish to delete.
          schema:
            type: string
        - name: price_id
          in: path
          required: true
          description: The ID of the product price to delete.
          schema:
            type: string
      responses:
        "405":
          description: Method Not Allowed. Contact support for deleting product prices.
      security:
        - bearerAuth: []
  /products/{product_id}/inventories:
    get:
      tags:
        - Product Inventories
      summary: Get All Product Inventories
      description: Retrieve all inventories for a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose inventories to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: A list of product inventories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductInventory"
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Product Inventories
      summary: Create a Product Inventory
      description: Create a new inventory record for a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product for which the inventory is being created.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
            $ref: "/components/schemas/ProductInventory"
      responses:
        "201":
          description: Product inventory created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInventory"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/inventory/{inventory_id}:
    get:
      tags:
        - Product Inventories
      summary: Get a Specific Product Inventory
      description: Retrieve details of a specific product inventory by its ID.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose inventory to retrieve.
          schema:
            type: string
        - name: inventory_id
          in: path
          required: true
          description: The ID of the product inventory to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified product inventory.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInventory"
        "404":
          description: Product or product inventory not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Product Inventories
      summary: Update a Specific Product Inventory
      description: Update details of a specific product inventory by its ID.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose inventory is being updated.
          schema:
            type: string
        - name: inventory_id
          in: path
          required: true
          description: The ID of the product inventory to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInventory"
      responses:
        "200":
          description: Product inventory updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductInventory"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product or product inventory not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Product Inventories
      summary: Delete a Specific Product Inventory
      description: Deletes a specific product inventory.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose inventory is to be deleted.
          schema:
            type: string
        - name: inventory_id
          in: path
          required: true
          description: The ID of the product inventory to delete.
          schema:
            type: string
      responses:
        "204":
          description: Product inventory deleted successfully.
        "404":
          description: Product or inventory not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/attributes:
    get:
      tags:
        - Product Attributes
      summary: Get All Product Attributes
      description: Retrieve all attributes for a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product whose attributes to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: A list of product attributes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAttribute"
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Product Attributes
      summary: Create a Product Attribute
      description: Creates a specific product attribute.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product for which the attribute is being created.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAttribute"
      responses:
        "200":
          description: Product attribute created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  products_attributes:
                    type: object
                    properties:
                      attribute_id:
                        type: integer
                      name:
                        type: string
                      slug:
                        type: string
                      user_defined_key:
                        type: string
                      type:
                        type: string
                      values:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            version_id:
                              type: integer
                            value:
                              type: string
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Product Attributes
      summary: Update Many Product Attributes
      description: Updates many attributes of a product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product for which the attributes are being updated.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAttribute"
      responses:
        "200":
          description: Product attributes updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  products_attributes:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductAttributeDetail"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/attributes/{attribute_id}:
    get:
      tags:
        - Product Attributes
      summary: Get A Specific Product Attribute
      description: Retrieves a specific product attribute.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product related to the specific attribute to retrieve.
          schema:
            type: string
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified product attribute.
          content:
            application/json:
              schema:
                type: object
                properties:
                  products_attributes:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductAttributeDetail"
        "404":
          description: Product or attribute not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/attributes/{attribute_id}/values/{value_id}:
    put:
      tags:
        - Product Attributes
      summary: Update a Specific Product Attribute Value
      description: Updates a specific product attribute value.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product.
          schema:
            type: string
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute.
          schema:
            type: string
        - name: value_id
          in: path
          required: true
          description: The ID of the attribute value to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAttribute"
      responses:
        "200":
          description: Product attribute value updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAttribute"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product, attribute, or attribute value not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /brands/{brand_id}/attributes/{attribute_id}/values/{value_id}:
    delete:
      tags:
        - Brand Attributes
      summary: Delete a Specific Brand Attribute Value
      description: Deletes a specific brand attribute value.
      parameters:
        - name: brand_id
          in: path
          required: true
          description: The ID of the brand.
          schema:
            type: string
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute.
          schema:
            type: string
        - name: value_id
          in: path
          required: true
          description: The ID of the attribute value to delete.
          schema:
            type: string
      responses:
        "204":
          description: Brand attribute value deleted successfully.
        "404":
          description: Brand, attribute, or attribute value not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Brand Attributes
      summary: Assign Attribute to Brand
      description: Assigns a specific attribute to a brand.
      parameters:
        - name: brand_id
          in: path
          required: true
          description: The ID of the brand to which the attribute will be assigned.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                attribute_id:
                  type: integer
                  description: The ID of the attribute to be assigned to the brand.
      responses:
        "200":
          description: Attribute assigned to brand successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Attribute assigned to brand successfully."
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Brand or attribute not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/assigned-attribute-sets:
    post:
      tags:
        - Product Attributes
      summary: Assign Attribute Set to Product
      description: Assigns a specific attribute set to a product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product to which the attribute set will be assigned.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                attribute_set_id:
                  type: integer
                  description: The ID of the attribute set to be assigned to the product.
      responses:
        "200":
          description: Attribute set assigned to product successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Attribute set assigned to product successfully."
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product or attribute set not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/channel/{channel_id}:
    post:
      tags:
        - Product Channels
      summary: Update or Create Web ID
      description: Updates or creates a web ID in product_channels for a specific product and channel.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product.
          schema:
            type: string
        - name: channel_id
          in: path
          required: true
          description: The ID of the channel.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                web_id:
                  type: integer
                  description: The web ID to be updated or created in product_channels.
      responses:
        "200":
          description: Web ID updated or created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Web ID updated or created successfully."
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product or channel not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /product-relation-types:
    get:
      tags:
        - Product Relations
      summary: Get All Product Relation Types
      description: Retrieves all product relation types.
      responses:
        "200":
          description: A list of all product relation types.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_relation_types:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductRelationType"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Product Relations
      summary: Create a Product Relation Type
      description: Creates a new product relation type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRelationType"
      responses:
        "200":
          description: Product relation type created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductRelationType"
      "400":
        description: Bad request. Invalid input parameters.
      "401":
        description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /product-relation-types/{relation_type_id}:
    get:
      tags:
        - Product Relations
      summary: Get a Specific Product Relation Type
      description: Retrieves a specific product relation type by its ID.
      parameters:
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the product relation type to retrieve.
          schema:
            type: integer
      responses:
        "200":
          description: Details of the specified product relation type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_relation_type:
                    $ref: "#/components/schemas/ProductRelationType"
        "404":
          description: Product relation type not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Product Relations
      summary: Update a Specific Product Relation Type
      description: Updates a specific product relation type by its ID.
      parameters:
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the product relation type to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRelationType"
      responses:
        "200":
          description: Product relation type updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_relation_type:
                    $ref: "#/components/schemas/ProductRelationType"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product relation type not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Product Relations
      summary: Delete a Specific Product Relation Type
      description: Deletes a specific product relation type by its ID.
      parameters:
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the product relation type to delete.
          schema:
            type: integer
      responses:
        "200":
          description: Product relation type deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Deleted."
        "404":
          description: Product relation type not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/relations:
    get:
      tags:
        - Product Relations
      summary: Get All Product Relations From a Single Product
      description: Retrieves all relations to a single product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product from which you are retrieving relations.
          schema:
            type: integer
      responses:
        "200":
          description: A list of all product relations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_relations:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        $ref: "#/components/schemas/ProductRelation"
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/relations/type/{relation_type_id}:
    get:
      tags:
        - Product Relations
      summary: Get Product Relations From a Product by Relation Type
      description: Retrieves relations to a product for a single relation type.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product from which you are retrieving relations.
          schema:
            type: integer
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the relation type from which you are retrieving relations.
          schema:
            type: integer
      responses:
        "200":
          description: A list of product relations for the specified relation type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_relations:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        $ref: "#/components/schemas/ProductRelation"
        "404":
          description: Product or relation type not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/relations/{related_product_id}/type/{relation_type_id}:
    post:
      tags:
        - Product Relations
      summary: Create Product Relation
      description: Creates a product relation between two products on a single relation type.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product on which the relation is based.
          schema:
            type: integer
        - name: related_product_id
          in: path
          required: true
          description: The ID of the product to which the base product is being attached.
          schema:
            type: integer
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the relation type to which the relation should belong.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: An empty object as the body is not used for this request.
      responses:
        "200":
          description: Product relation created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_relations:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        $ref: "#/components/schemas/ProductRelation"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product, related product, or relation type not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Product Relations
      summary: Delete a Product Relation
      description: Deletes a specific product relation between two products under a specified relation type.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product on which the relation is based.
          schema:
            type: integer
        - name: related_product_id
          in: path
          required: true
          description: The ID of the product to which the base product is attached.
          schema:
            type: integer
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the relation type to which the relation belongs.
          schema:
            type: integer
      responses:
        "200":
          description: Product relation deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product relation deleted successfully."
        "404":
          description: Product, related product, or relation type not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/relations/{related_product_id}/type/{relation_type_id}/attributes:
    get:
      tags:
        - Product Relations
      summary: Get Product Relation Attributes From a Product by Relation and Relation Type
      description: Retrieves product relation attributes for a specific relation between two products under a specified relation type.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product from which you are retrieving relations.
          schema:
            type: integer
        - name: related_product_id
          in: path
          required: true
          description: The ID of the product to which the base product is being attached.
          schema:
            type: integer
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the relation type to which the relation belongs.
          schema:
            type: integer
      responses:
        "200":
          description: A list of product relation attribute values.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_relation_attribute_values:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductRelationAttributeValue"
        "404":
          description: Product, related product, or relation type not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Product Relations
      summary: Create or Update Product Relation Attributes
      description: Creates or updates product relation attributes between two products on a single relation type.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product on which the relation is based.
          schema:
            type: integer
        - name: related_product_id
          in: path
          required: true
          description: The ID of the product to which the base product is being attached.
          schema:
            type: integer
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the relation type to which the relation belongs.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # Specify the properties of the product relation attributes here
                # Example:
                attribute_id:
                  type: integer
                  description: The ID of the attribute.
                value:
                  type: string
                  description: The value of the attribute.
      responses:
        "200":
          description: Product relation attributes created or updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_relation_attribute_values:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductRelationAttributeValue"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product, related product, or relation type not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/relations/{related_product_id}/type/{relation_type_id}/attribute/{attribute_id}:
    post:
      tags:
        - Product Relations
      summary: Create or Update a Single Attribute of a Product Relation
      description: Creates or updates a single attribute of a product relation between two products on a single relation type.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product on which the relation is based.
          schema:
            type: integer
        - name: related_product_id
          in: path
          required: true
          description: The ID of the product to which the base product is being attached.
          schema:
            type: integer
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the relation type to which the relation belongs.
          schema:
            type: integer
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to create or update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  description: The value of the attribute to be created or updated.
      responses:
        "200":
          description: Product relation attribute created or updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_relation_attribute_values:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductRelationAttributeValue"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Product, related product, relation type, or attribute not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Product Relations
      summary: Delete a Product Relation Attribute
      description: Deletes a specific attribute of a product relation between two products on a single relation type.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product on which the relation is based.
          schema:
            type: integer
        - name: related_product_id
          in: path
          required: true
          description: The ID of the product to which the base product is attached.
          schema:
            type: integer
        - name: relation_type_id
          in: path
          required: true
          description: The ID of the relation type to which the relation belongs.
          schema:
            type: integer
        - name: attribute_id
          in: path
          required: true
          description: The ID of the attribute to delete.
          schema:
            type: integer
      responses:
        "200":
          description: Product relation attribute deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product relation attribute deleted successfully."
        "404":
          description: Product, related product, relation type, or attribute not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/tags:
    get:
      tags:
        - Product Tags
      summary: Get All Product Tags From a Single Product
      description: Retrieves all tags from all versions of a single product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product from which you are retrieving tags.
          schema:
            type: integer
      responses:
        "200":
          description: A list of all product tags from all versions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_id:
                    type: integer
                    description: The ID of the product.
                  tags:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Product Tags
      summary: Update Product Tags Across Multiple Versions
      description: Updates tags across multiple versions of a product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product for which tags are being updated.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
                  description: An object mapping version IDs to arrays of tag strings.
      responses:
        "200":
          description: Product tags updated successfully across multiple versions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_id:
                    type: integer
                  tags:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
        "404":
          description: Product not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /products/{product_id}/tags/{version_id}:
    get:
      tags:
        - Product Tags
      summary: Get All Product Tags From a Single Product by Version
      description: Retrieves all tags from a specific version of a single product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product from which you are retrieving tags.
          schema:
            type: integer
        - name: version_id
          in: path
          required: false
          description: The ID of the version from which you are retrieving tags. Omitting this retrieves tags from all versions.
          schema:
            type: integer
      responses:
        "200":
          description: A list of all product tags from the specified version.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_id:
                    type: integer
                    description: The ID of the product.
                  tags:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
        "404":
          description: Product or version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Product Tags
      summary: Update Product Tags for a Specific Version
      description: Updates tags for a specific version of a product.
      parameters:
        - name: product_id
          in: path
          required: true
          description: The ID of the product to update.
          schema:
            type: integer
        - name: version_id
          in: path
          required: true
          description: The version ID for which tags are being updated.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
                  description: The list of tags to update for the specified version.
      responses:
        "200":
          description: Product tags updated successfully for the specified version.
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_id:
                    type: integer
                  tags:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
        "404":
          description: Product or version not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /templates:
    get:
      tags:
        - Templates
      summary: Get All Templates
      description: Retrieves all templates.
      responses:
        "200":
          description: A list of all templates.
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      $ref: "#/components/schemas/Template"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Templates
      summary: Create a Template
      description: Creates a new template.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the Template.
                slug:
                  type: string
                  description: Slug for the Template.
              required:
                - name
                - slug
      responses:
        "201":
          description: Template created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /templates/{template_id}:
    get:
      tags:
        - Templates
      summary: Get a Specific Template
      description: Retrieves a specific template by its ID.
      parameters:
        - name: template_id
          in: path
          required: true
          description: The ID of the template to retrieve.
          schema:
            type: integer
      responses:
        "200":
          description: Details of the specified template.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "404":
          description: Template not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Templates
      summary: Update a Specific Template
      description: Updates a specific template by its ID.
      parameters:
        - name: template_id
          in: path
          required: true
          description: The ID of the template to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name of the Template.
                slug:
                  type: string
                  description: New slug for the Template. (Optional)
                content:
                  type: string
                  description: New HTML or other content of the Template. (Optional)
      responses:
        "200":
          description: Template updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Template not found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /webhooks:
    get:
      tags:
        - Webhooks
      summary: Get All Webhooks
      description: Retrieves a list of all configured webhooks.
      responses:
        "200":
          description: A list of all webhooks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhooks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Webhook"
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    post:
      tags:
        - Webhooks
      summary: Create a Webhook
      description: Creates a new webhook with the specified properties.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Webhook"
      responses:
        "201":
          description: Webhook created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          description: Bad request. Invalid input parameters.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /webhooks/{webhook_id}:
    get:
      tags:
        - Webhooks
      summary: Get a Specific Webhook
      description: Retrieves detailed information about a specific webhook.
      parameters:
        - in: path
          name: webhook_id
          required: true
          schema:
            type: integer
          description: The unique identifier of the webhook to retrieve.
      responses:
        "200":
          description: Successfully retrieved the webhook details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookDetails"
        "404":
          description: Not found. The specified webhook could not be found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
    put:
      tags:
        - Webhooks
      summary: Update a Webhook
      description: Updates an existing webhook with the specified properties.
      parameters:
        - in: path
          name: webhook_id
          required: true
          schema:
            type: integer
          description: The unique identifier of the webhook to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Webhook"
      responses:
        "200":
          description: Webhook updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          description: Bad request. Invalid input parameters.
        "404":
          description: Not found. The webhook to update could not be found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /webhooks/{webhook_id}/disable:
    post:
      tags:
        - Webhooks
      summary: Disable a Webhook
      description: Disables an existing webhook, preventing it from receiving any further events.
      parameters:
        - in: path
          name: webhook_id
          required: true
          schema:
            type: integer
          description: The unique identifier of the webhook to be disabled.
      responses:
        "200":
          description: Webhook disabled successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Webhook disabled successfully."
        "404":
          description: Not found. The webhook to disable could not be found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []
  /webhooks/{webhook_id}/enable:
    put:
      tags:
        - Webhooks
      summary: Enable a Webhook
      description: Enables a previously disabled webhook, allowing it to start receiving events again.
      parameters:
        - in: path
          name: webhook_id
          required: true
          schema:
            type: integer
          description: The unique identifier of the webhook to be enabled.
      responses:
        "200":
          description: Webhook enabled successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "404":
          description: Not found. The webhook to enable could not be found.
        "401":
          description: Unauthorized. Invalid or missing authorization token.
      security:
        - bearerAuth: []

# COMPONENTS
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: >
        Bearer authentication with a token. Prepend 'Bearer ' to the token. 
        Example for testing: 'Bearer exampleApiKey123'
  schemas:
    Ping:
      type: object
      properties:
        time:
          type: string
          format: date-time
          example: "Tue Feb 7 19:05:03 UTC 2017"
    Attribute:
      type: object
      properties:
        id:
          type: string
          description: Jasper Attribute ID
        name:
          type: string
          description: Attribute name (must be unique)
        type:
          type: string
          enum: [selectbox, date, text, textarea, multiselect]
        note:
          type: string
          description: User information about the attribute
        display_group:
          type: string
          description: Used for display grouping in the PIM UI
        sort_order:
          type: integer
          description: The sort order for display
        publish:
          type: boolean
          description: Whether to publish the attribute
        version_id:
          type: string
          description: The ID of the version
        created_at:
          type: string
          format: date-time
          description: Time the attribute was created (read only)
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Time the attribute was updated (read only)
          readOnly: true
    AttributeTypeValue:
      type: object
      properties:
        id:
          type: string
          description: Jasper attribute type value ID.
        attribute_id:
          type: string
          description: ID of the attribute to which the type value belongs.
        value:
          type: string
          description: Type value (e.g., for a drop-down list).
        version_id:
          type: string
          description: The ID of the version.
        created_at:
          type: string
          format: date-time
          description: Time the type value was created (read only).
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Time the type value was updated (read only).
          readOnly: true
      required:
        - id
        - attribute_id
        - value
    AttributeSet:
      type: object
      properties:
        id:
          type: string
          description: Jasper Attribute Set ID.
        name:
          type: string
          description: Attribute Set name (must be unique).
        sort_order:
          type: integer
          description: The sort order for display.
      required:
        - id
        - name
    AttributeSetAttribute:
      type: object
      properties:
        id:
          type: string
          description: Jasper attribute set attribute ID.
        attribute_id:
          type: string
          description: ID of the attribute.
        attribute_set_id:
          type: string
          description: ID of the attribute set.
      required:
        - id
        - attribute_id
        - attribute_set_id
    Block:
      type: object
      properties:
        id:
          type: string
          description: Jasper Block ID.
        name:
          type: string
          description: Name of the block.
        slug:
          type: string
          description: Slug for the block, typically used in URLs.
        content:
          type: string
          description: Content of the block, which could include text, HTML, or other data.
      required:
        - id
        - name
        - slug
        - content
    BlockAsset:
      type: object
      properties:
        id:
          type: string
          description: Jasper block asset ID.
        block_id:
          type: string
          description: ID of the block to which the asset belongs.
        uri:
          type: string
          description: URI of the asset.
        alttext:
          type: string
          description: Image alternate text, used for accessibility.
        sort_order:
          type: integer
          description: Sort order of the asset within the block.
        thumbnail:
          type: boolean
          description: Indicates whether the asset is the thumbnail for the block.
      required:
        - id
        - block_id
        - uri
    Brand:
      type: object
      properties:
        id:
          type: string
          description: Jasper Brand ID.
        name:
          type: string
          description: Name of the brand.
        desc:
          type: string
          description: Description of the brand.
        seo_meta_desc:
          type: string
          description: Meta description for SEO.
        seo_meta_keywords:
          type: string
          description: Comma-separated list of meta keywords for SEO.
        seo_meta_title:
          type: string
          description: Meta page title for SEO.
        search_keywords:
          type: string
          description: Comma-separated list of search keywords associated with the brand.
      required:
        - id
        - name
    BrandAsset:
      type: object
      properties:
        id:
          type: string
          description: Jasper Brand asset ID.
        brand_id:
          type: string
          description: ID of the brand to which the asset belongs.
        uri:
          type: string
          description: URI of the asset.
        alttext:
          type: string
          description: Image alternate text, used for accessibility.
        thumbnail:
          type: boolean
          description: Indicates whether the asset is the thumbnail for the brand.
      required:
        - id
        - brand_id
        - uri
    BrandAttribute:
      type: object
      properties:
        id:
          type: string
          description: Jasper Brand attribute ID.
        brand_id:
          type: string
          description: ID of the brand to which the attribute belongs.
        name:
          type: string
          description: Name of the attribute.
        value:
          type: string
          description: Value of the attribute.
        type:
          type: string
          description: Type of the attribute (e.g., text, number, date).
      required:
        - id
        - brand_id
        - name
        - value
    Category:
      type: object
      properties:
        id:
          type: string
          description: Jasper Category ID.
        name:
          type: string
          description: Name of the category.
        desc:
          type: string
          description: Description of the category.
        parent_id:
          type: string
          description: ID of the parent category, if any.
        seo_meta_desc:
          type: string
          description: Meta description for SEO.
        seo_meta_keywords:
          type: string
          description: Comma-separated list of meta keywords for SEO.
        seo_meta_title:
          type: string
          description: Meta page title for SEO.
      required:
        - id
        - name
    CategoryAsset:
      type: object
      properties:
        id:
          type: string
          description: Jasper Category asset ID.
        category_id:
          type: string
          description: ID of the category to which the asset belongs.
        uri:
          type: string
          description: URI of the asset.
        alttext:
          type: string
          description: Image alternate text, used for accessibility.
        thumbnail:
          type: boolean
          description: Indicates whether the asset is the thumbnail for the category.
      required:
        - id
        - category_id
        - uri
    WebId:
      type: object
      properties:
        webId:
          type: string
          description: The web ID to be updated or created.
      required:
        - webId
    Channel:
      type: object
      properties:
        id:
          type: string
          description: Jasper Channel ID.
        channel_name:
          type: string
          description: Name of the channel.
        sync:
          type: boolean
          description: Whether the channel is currently enabled.
        price_base:
          type: string
          description: Code for price book base for use on channel.
        inventory_location:
          type: string
          description: Code for base inventory for use on channel.
      required:
        - id
        - channel_name
    DisplayGroup:
      type: object
      properties:
        id:
          type: string
          description: Jasper Display Group ID.
        name:
          type: string
          description: Name of the display group.
        sort_order:
          type: integer
          description: The sort order for display.
        is_visible:
          type: boolean
          description: Whether to display the display group.
      required:
        - id
        - name
    ExportDetails:
      type: object
      properties:
        id:
          type: string
          description: The ID of the export.
        status:
          type: string
          description: The status of the export (e.g., pending, completed, failed).
        file_url:
          type: string
          description: The URL to download the export file, if available.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the export was created.
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the export status was last updated.
      required:
        - id
        - status
    GenericEntity:
      type: object
      properties:
        id:
          type: string
          description: Jasper generic entity ID.
        name:
          type: string
          description: Name of the generic entity.
        description:
          type: string
          description: Description of the generic entity.
        is_tree:
          type: boolean
          description: Whether to display the listing as a flat table or nested view.
        is_product_attribute:
          type: boolean
          description: Whether the generic entity is selectable in the product details.
        priority:
          type: integer
          description: Generic entity priority.
        parent_id:
          type: string
          description: ID of the parent generic entity (set to null if root generic entity).
        publishable:
          type: boolean
          description: Whether the generic entity can be published to channels.
        display_on_navigation:
          type: boolean
          description: Whether the generic entity gets displayed on the navigation bar.
      required:
        - id
        - name
        - parent_id
    ConcreteEntity:
      type: object
      properties:
        id:
          type: string
          description: Concrete entity ID.
        name:
          type: string
          description: Name of the concrete entity.
        parent_id:
          type: string
          description: ID of the parent concrete entity.
        generic_entity_id:
          type: string
          description: ID of the generic entity to which the concrete entity is attached.
        priority:
          type: integer
          description: Concrete entity priority.
        slug:
          type: string
          description: Concrete entity slug.
      required:
        - id
        - name
        - generic_entity_id
    Option:
      type: object
      properties:
        id:
          type: string
          description: Jasper Option ID.
        name:
          type: string
          description: Name of the option.
      required:
        - id
        - name
    OptionValue:
      type: object
      properties:
        id:
          type: string
          description: Jasper option value ID.
        option_id:
          type: string
          description: ID of the option to which the value belongs.
        value:
          type: string
          description: Value of the Option Value.
        label:
          type: string
          description: Label of the Option Value.
        sort_order:
          type: integer
          description: Sort order for the value.
        is_default:
          type: boolean
          description: Indicates if the option value is the default.
      required:
        - id
        - option_id
        - value
    OptionSet:
      type: object
      properties:
        id:
          type: string
          description: Jasper Option Set ID.
        name:
          type: string
          description: Name of the Option Set.
      required:
        - id
        - name
    OptionSetOption:
      type: object
      properties:
        id:
          type: string
          description: Jasper option set option ID.
        option_id:
          type: integer
          description: ID of the option.
        option_set_id:
          type: integer
          description: ID of the option set.
        sort_order:
          type: integer
          description: Sort order for the option within the option set.
      required:
        - id
        - option_id
        - option_set_id
    Page:
      type: object
      properties:
        id:
          type: string
          description: Jasper Page ID.
        name:
          type: string
          description: Name of the page.
        slug:
          type: string
          description: Page slug for URL.
        content:
          type: string
          description: HTML content of the page.
        mobile_body:
          type: string
          description: Mobile optimized HTML content.
        url:
          type: string
          description: URL of the page.
        has_mobile_version:
          type: boolean
          description: Indicates if the page has a mobile version.
        is_customers_only:
          type: boolean
          description: Indicates if the page is restricted to logged-in customers.
        is_homepage:
          type: boolean
          description: Indicates if the page is set as the homepage.
        is_visible:
          type: boolean
          description: Indicates if the page is visible.
        seo_meta_desc:
          type: string
          description: Meta description for SEO.
        seo_meta_keywords:
          type: string
          description: Meta keywords for SEO.
        seo_meta_title:
          type: string
          description: Meta page title for SEO.
        search_keywords:
          type: string
          description: Comma-separated list of search keywords.
      required:
        - id
        - name
    PageAsset:
      type: object
      properties:
        id:
          type: string
          description: Jasper page asset ID.
        page_id:
          type: string
          description: ID of the page to which the asset belongs.
        uri:
          type: string
          description: URI of the asset.
        alttext:
          type: string
          description: Image alternate text.
        thumbnail:
          type: boolean
          description: Indicates whether the asset is the thumbnail.
      required:
        - id
        - page_id
        - uri
    Product:
      type: object
      properties:
        id:
          type: string
          description: Jasper Product ID.
        name:
          type: string
          description: Name of the product.
        sku:
          type: string
          description: Unique SKU of the product.
        product_url:
          type: string
          description: URL of the product.
        style_id:
          type: string
          description: Style ID associated with the product.
        brand_id:
          type: string
          description: Brand ID associated with the product.
        parent_id:
          type: string
          description: Parent product ID for variant child products.
        option_set_id:
          type: string
          description: Option set ID associated with the product.
        option_values:
          type: array
          items:
            type: string
          description: Required for variant child products.
        is_bundle:
          type: boolean
          description: Indicates if the product is the top of a bundle.
        bundle_id:
          type: string
          description: Bundle ID that the product belongs to.
        category_ids:
          type: array
          items:
            type: string
          description: Category IDs associated with the product.
        children:
          type: array
          items:
            type: string
          description: Child product objects (READ ONLY).
        is_visible:
          type: boolean
          description: Indicates if the product is visible.
        enabled:
          type: boolean
          description: Indicates if the product is enabled.
        desc_short:
          type: string
          description: Master short description of the product.
        desc_long:
          type: string
          description: Master long description of the product.
        prices:
          type: array
          items:
            type: string
          description: Product price objects (READ ONLY).
        inventory:
          type: array
          items:
            type: string
          description: Product inventory objects (READ ONLY).
      required:
        - id
        - name
        - sku
    ProductAsset:
      type: object
      properties:
        id:
          type: string
          description: Jasper Product asset ID.
        product_id:
          type: string
          description: ID of the product to which the asset belongs.
        uri:
          type: string
          description: URI of the asset.
        sort_order:
          type: integer
          description: Sort order of the asset.
        private:
          type: boolean
          description: Indicates if the asset is private.
        alttext:
          type: string
          description: Image alternate text.
        name:
          type: string
          description: Name of the image.
        desc:
          type: string
          description: Description of the image.
        type:
          type: string
          description: Type of the image.
        thumbnail:
          type: boolean
          description: Indicates whether the asset is the thumbnail.
      required:
        - id
        - product_id
        - uri
    ProductBarcode:
      type: object
      properties:
        id:
          type: string
          description: Product barcode ID.
        product_id:
          type: string
          description: ID of the product to which the barcode belongs.
        type:
          type: string
          description: The type of this barcode (EAN, UPC-A, GTIN-13, ITF-14, Custom).
        barcode:
          type: string
          description: The barcode number.
        created_at:
          type: string
          format: date-time
          description: Datetime of the creation.
        updated_at:
          type: string
          format: date-time
          description: Datetime of the last update.
      required:
        - id
        - product_id
        - type
        - barcode
    ProductCategory:
      type: object
      properties:
        id:
          type: string
          description: Jasper Product category ID.
        parent_id:
          type: string
          description: Category parent ID.
        name:
          type: string
          description: Category name.
        desc:
          type: string
          description: Category description.
        slug:
          type: string
          description: Category slug.
        attribute_sets:
          type: array
          items:
            type: string
          description: Attribute set IDs for the category.
        is_visible:
          type: boolean
          description: Whether to display the category.
        seo_meta_desc:
          type: string
          description: Meta description for SEO.
        seo_meta_keywords:
          type: string
          description: Meta keywords for SEO.
        seo_meta_title:
          type: string
          description: Meta page title for SEO.
        search_keywords:
          type: string
          description: Comma separated list of search keywords.
        created_at:
          type: string
          format: date-time
          description: Time the category was created (read only).
        updated_at:
          type: string
          format: date-time
          description: Time the category was updated (read only).
      required:
        - id
        - name
    ProductPrice:
      type: object
      properties:
        id:
          type: string
          description: Jasper Product price ID.
        product_id:
          type: string
          description: ID of the product to which the price belongs.
        msrp:
          type: number
          format: float
          description: Manufacturer's Suggested Retail Price.
        map:
          type: number
          format: float
          description: Minimum Advertised Price.
        cost:
          type: number
          format: float
          description: Cost Price.
        sell_price:
          type: number
          format: float
          description: Selling price.
        from:
          type: string
          format: date-time
          description: Price start date.
        to:
          type: string
          format: date-time
          description: Price end date.
        currency_id:
          type: string
          description: Price currency ID.
        tax_class_id:
          type: string
          description: Tax class ID.
        author:
          type: string
          description: Price author.
        booktype:
          type: string
          description: Pricebook Type.
        batch_id:
          type: string
          description: Batch Import ID.
        sell_price_reason:
          type: string
          description: Price over-ride reason.
        base:
          type: boolean
          description: Price base (required).
      required:
        - id
        - product_id
        - sell_price
        - base
    ProductInventory:
      type: object
      properties:
        id:
          type: string
          description: Jasper Product inventory ID.
        product_id:
          type: string
          description: ID of the product to which the inventory belongs.
        site:
          type: string
          description: Site of inventory.
        bin:
          type: string
          description: Bin where the inventory is stored.
        location:
          type: string
          description: Location of the inventory.
        type:
          type: string
          description: Inventory type (e.g., physical, reserved).
        count_on_hand:
          type: integer
          description: Count of inventory on hand.
        count_on_hold:
          type: integer
          description: Count of inventory on hold.
        source:
          type: string
          description: Source of the inventory.
        batch_id:
          type: string
          description: Batch ID from inventory loading.
      required:
        - id
        - product_id
        - site
        - bin
        - location
        - type
        - count_on_hand
    ProductAttribute:
      type: object
      properties:
        id:
          type: string
          description: Jasper Attribute ID.
        name:
          type: string
          description: Attribute name (must be unique).
        slug:
          type: string
          description: Slugified Attribute name.
        user_defined_key:
          type: string
          description: User Key for the attribute.
        type:
          type: string
          description: Attribute type.
          enum: [selectbox, date, datetime, textarea, multiselect, text]
        values:
          type: array
          items:
            type: string
          description: The Attributes Value(s).
      required:
        - id
        - name
        - type
    ProductRelationType:
      type: object
      properties:
        id:
          type: string
          description: Jasper Product Relation Type ID.
        name:
          type: string
          description: Product Relation Type name.
        description:
          type: string
          description: Product Relation Type description.
        child_label:
          type: string
          description: How the relation is labeled when seen from the products assigned in the relation.
        parent_label:
          type: string
          description: How the relation is labeled when seen from the product where the related are being assigned.
        label:
          type: string
          description: Grouping label for product relation type.
      required:
        - id
        - name
        - child_label
        - parent_label
        - relationship_cardinality
        - label
    ProductRelation:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the related product.
        name:
          type: string
          description: Name of the related product.
        sku:
          type: string
          description: SKU of the related product.
      required:
        - id
        - name
        - sku
    ProductRelationAttributeValue:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the product relation attribute value.
        entity_id:
          type: integer
          description: The ID of the entity (product) to which the attribute value is attached.
        attribute_id:
          type: integer
          description: The ID of the attribute.
        value:
          type: string
          description: The value of the attribute.
      required:
        - id
        - entity_id
        - attribute_id
        - value
    Template:
      type: object
      properties:
        id:
          type: integer
          description: Jasper Template ID.
        name:
          type: string
          description: Name of the Template.
        slug:
          type: string
          description: Slug for the Template.
        content:
          type: string
          description: HTML or other content of the Template.
      required:
        - id
        - name
        - slug
        - content
    Webhook:
      type: object
      properties:
        name:
          type: string
          description: Webhook name.
        callback_url:
          type: string
          description: Webhook callback URL.
        entity_type:
          type: string
          description: Webhook entity type (valid values; product, category, brand, product_asset, concrete_entity).
        include_entity_data:
          type: integer
          description: Include data with the payload (valid values; 0 or 1).
        headers:
          type: object
          additionalProperties: true
          description: Custom headers to include with the payload.
        retry_policy:
          type: string
          description: Retry policy in case of failure (valid values; linear, exponential, no_retry).
        minimum_retry_interval:
          type: integer
          description: Interval time before retry (between 60 and 86400 seconds).
        retry_limit:
          type: integer
          description: Retry limit (between 0 and 10).
        channel_id:
          type: integer
          description: PIM channel ID (channel specific webhook).
        event_type:
          type: string
          description: Sync channel type (channel specific webhook).
      required:
        - name
        - callback_url
        - entity_type
